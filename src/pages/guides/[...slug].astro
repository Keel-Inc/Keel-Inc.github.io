---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const articles = await getCollection('articles');
  return articles.map(article => ({
    params: { slug: article.slug },
    props: { article }
  }));
}

const { article } = Astro.props;
const { Content } = await article.render();

const site = {
  url: 'https://keel-inc.com',
  title: `${article.data.title} | Keel Inc.`,
  desc: article.data.description
};
---

<BaseLayout>
  <Fragment slot="head">
    <title>{site.title}</title>
    <meta name="description" content={site.desc} />
    <link rel="canonical" href={`${site.url}/guides/${article.slug}`} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&display=swap" rel="stylesheet">

    <!-- OpenGraph -->
    <meta property="og:type" content="article" />
    <meta property="og:url" content={`${site.url}/guides/${article.slug}`} />
    <meta property="og:title" content={article.data.title} />
    <meta property="og:description" content={site.desc} />
    <meta property="og:image" content="/images/og-banner.png" />
    {article.data.tags && article.data.tags.map((tag: string) => (
      <meta property="article:tag" content={tag} />
    ))}

    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={article.data.title} />
    <meta name="twitter:description" content={site.desc} />
    <meta name="twitter:image" content="/images/og-banner.png" />

    <!-- Structured data -->
    <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": article.data.title,
      "description": article.data.description,
      ...(article.data.pubDate && { "datePublished": article.data.pubDate.toISOString() }),
      "author": {
        "@type": "Person",
        "name": "Richard Keelan"
      },
      "publisher": {
        "@type": "Organization",
        "name": "Keel Inc.",
        "url": "https://keel-inc.com"
      },
      "url": `${site.url}/guides/${article.slug}`,
      ...(article.data.tags && { "keywords": article.data.tags.join(", ") })
    })}
    </script>
  </Fragment>

  <header class="py-8 text-center border-b">
    <nav class="mb-6">
      <a href="/" class="text-sky-700 hover:text-sky-800 underline">
        ‚Üê Back to Home
      </a>
    </nav>
    <h1 class="text-4xl font-extrabold font-heading-1 max-w-4xl mx-auto">
      {article.data.title}
    </h1>
    <p class="mt-4 text-xl text-slate-600 max-w-2xl mx-auto font-subtitle">
      {article.data.description}
    </p>

    {false && (article.data.tags ?? []).length > 0 && (
      <div class="mt-4 flex flex-wrap justify-center gap-2">
        {(article.data.tags ?? []).map((tag: string) => (
          <span class="px-3 py-1 bg-slate-100 text-slate-700 rounded-full text-sm">
            {tag}
          </span>
        ))}
      </div>
    )}
  </header>

  <main class="flex-1 max-w-4xl mx-auto px-4 py-8">
    <article class="prose prose-lg max-w-none">
      <Content />
    </article>
  </main>

  <footer class="py-8 text-center text-sm text-slate-500 border-t font-caption">
    &copy; {new Date().getFullYear()} Keel Inc.
    <a href="mailto:richard@keel-inc.com" class="underline ml-4">Contact</a>
  </footer>
</BaseLayout>